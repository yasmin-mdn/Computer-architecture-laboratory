----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    10:59:38 12/22/2021 
-- Design Name: 
-- Module Name:    hw8 - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
 
entity pipo is
 port(
 clk : in std_logic;
 D: in std_logic_vector(3 downto 0);
 Q: out std_logic_vector(3 downto 0)
 );
end pipo;
 
architecture arch of pipo is
 
begin
 
 process (clk)
 begin
 if (CLK'event and CLK='1') then
 Q <= D;
 end if;
 end process;
 
end arch;

--------------------------------------------------------


----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    10:59:38 12/22/2021 
-- Design Name: 
-- Module Name:    hw8 - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
entity shift_register is
Port (
Input : in unsigned (7 downto 0);
selector : in unsigned (1 downto 0);
Clock : in STD_LOGIC;
Output : out unsigned (7 downto 0)
);
end shift_register;
architecture Behavioral of shift_register is
signal Middle : unsigned (7 downto 0) := Input;
begin
process(clock)
	begin
	if rising_edge(clock) then
	case selector is
		when "01" =>
			Middle(7) <= '0';
			Middle(6) <= Middle(7);
			Middle(5) <= Middle(6);
			Middle(4) <= Middle(5);
			Middle(3) <= Middle(4);
			Middle(2) <= Middle(3);
			Middle(1) <= Middle(2);
			Middle(0) <= Middle(1);
		when "10" =>
			Middle(0) <= Middle(7);
			Middle(7) <= Middle(6);
			Middle(6) <= Middle(5);
			Middle(5) <= Middle(4);
			Middle(4) <= Middle(3);
			Middle(3) <= Middle(2);
			Middle(2) <= Middle(1);
			Middle(1) <= Middle(2);
		when others => null;
	end case;	
	end if;
end process;
Output <= Middle;
end Behavioral;

